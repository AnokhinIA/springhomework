package lesson30.JPA;

/*
Реализовать поддержку справочника городов (или любого другого справочника),
сохраняя информацию в БД, введенную пользователем через консоль. Среди атрибутов города следует отметить код города,
наименование на русском и английском языке, численность проживающих. Манипулирование с данными в БД следует осуществлять,
используя технологию Spring Data JPA, а при взаимодействии с пользователем полагаться на возможности Spring Shell,
предоставляя CRUD-операции.
*Исходное создание схемы БД рекомендуется сделать через скрипты миграции (liquibase).
Реализован другой справочник.
 */

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class JpaStarter {
    public static void main(String[] args) {
        SpringApplication.run(JpaStarter.class, args);
    }
}


/* Замечания по проекту  / Устранение замечачний
Всё отлично улыбаюсь

Есть только небольшой комментарий: в методе deleteInsurer в классе InsurersController параметр назван в upperCase, так следует называть
только константы, все остальные переменные следует называть через camelCase
==> Устранено

По поводу вашего TODO комментария в файле schema.xml могу порекомендовать вынести множество видов страхования в отдельную таблицу и сделать связь с таблицей старховщиков как one-to-many.
Например добавить таблицу insurance_type с полями id, insurer_id, type
Соответственно в коде через hibernate можно будет реализовать связь таким образом, чтобы автоматически подтягивались все типы страхования, которые есть у страховщика.
Для этого нужно в класс Insurers добавить такое поле с аннотациями
@OneToMany(mappedBy="insurer")
List<InsuracneType> insuranceTypes;

Ну и создать еще отдельный entity класс InsuracneType, где тоже нужно будет отразить связь с таблицей Insurers:

@ManyToOne
@JoinColumn(name = "insurer_id", insertable = false, updatable = false)
private Insurers insurer;

Ну и сам класс Insurers лучше переименовать просто в Insurer, не смотря на то, что таблица называется insurers.
То есть таблица хранит коллекцию страховщиков и такое название отражает корректно его суть, а класс представляет собой одну запись из этой таблице,
то есть одного страховщика, поэтому название класса во множественном числе не совсем правильное



 */